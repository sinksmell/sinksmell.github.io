<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SinkSmell | Blog</title>
    <link>https://sinksmell.github.io/posts/</link>
    <description>Recent content in Posts on SinkSmell | Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jan 2020 14:47:21 +0800</lastBuildDate>
    
	<atom:link href="https://sinksmell.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二分查找模板</title>
      <link>https://sinksmell.github.io/2020/bsearch/</link>
      <pubDate>Fri, 31 Jan 2020 14:47:21 +0800</pubDate>
      
      <guid>https://sinksmell.github.io/2020/bsearch/</guid>
      <description>核心思想 找出某个性质，根据这个性质，可以将区间划分成两个部分，逐渐缩小搜索区间，直至找到目标元素 搜索条件 数据有序 模板1. // 将区间 [l,r] 分割成 [l,mid] [mid+1,r]</description>
    </item>
    
    <item>
      <title>跨域问题及解决方法</title>
      <link>https://sinksmell.github.io/2019/cors/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sinksmell.github.io/2019/cors/</guid>
      <description>跨域问题是什么 同源策略 同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所</description>
    </item>
    
    <item>
      <title>计算机网络基础</title>
      <link>https://sinksmell.github.io/2019/network/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sinksmell.github.io/2019/network/</guid>
      <description>计算机网络基础知识 TCP/IP 四层结构 ps: 上图中是图解HTTP中的划分 应用层 决定了向用户提供应用服务时通信的活动 传输层 提供处于网络连接中的两台计算机直接</description>
    </item>
    
    <item>
      <title>Go语言 Defer Return 执行顺序探究</title>
      <link>https://sinksmell.github.io/2019/defer/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sinksmell.github.io/2019/defer/</guid>
      <description>Go语言Defer Return 返回值执行顺序探究 defer之间的执行顺序 go 的 defer 语句是用来延迟执行函数的关键字 package main import &amp;#34;fmt&amp;#34; func defers(a int) int { defer func() { fmt.Println(&amp;#34;Defer 1...&amp;#34;) }() defer func() { fmt.Println(&amp;#34;Defer 2...&amp;#34;) }()</description>
    </item>
    
  </channel>
</rss>